mql5
//+------------------------------------------------------------------+
//|               Multi Currency Forex Indicator                       |
//|                 Developer: Forex Robot Easy Team                  |
//|                 Website: forexroboteasy.com                        |
//+------------------------------------------------------------------+

// Define input parameters
input int IndicatorPeriod = 14;
input double StopLoss = 100.0;
input double TakeProfit = 200.0;

// Define global variables
double Bid;
double Ask;

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
{
   //--- Check if all required indicators are available
   if (!IndicatorsExist())
   {
      Print('Some indicators are missing. Please make sure all required indicators are installed.');
      return INIT_FAILED;
   }

   //--- Set chart properties
   ChartSetInteger(0, CHART_AUTOSCROLL, false);
   ChartSetInteger(0, CHART_SHIFT, 1);

   return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
{
   //--- Clear previous objects
   ObjectDelete(0, 'TrendLine');

   //--- Calculate indicator values
   double indicatorBuffer[rates_total];
   ArrayInitialize(indicatorBuffer, 0);
   for (int i = IndicatorPeriod; i < rates_total; i++)
   {
      indicatorBuffer[i] = CalculateIndicatorValue(i, open, high, low, close);
   }

   //--- Check for intersection of the indicator
   for (int i = IndicatorPeriod; i < rates_total; i++)
   {
      if (indicatorBuffer[i] > 0 && indicatorBuffer[i-1] < 0)
      {
         // Bullish trend identified
         double entryPrice = Ask + StopLoss * Point;
         double stopLossPrice = Ask - StopLoss * Point;
         double takeProfitPrice = Ask + TakeProfit * Point;
         
         Print('Bullish trend identified. Placing BUYSTOP pending order.');
         Print('Entry Price: ', entryPrice);
         Print('Stop Loss: ', stopLossPrice);
         Print('Take Profit: ', takeProfitPrice);
         
         ObjectCreate(0, 'TrendLine', OBJ_TREND, 0, Time[i], entryPrice, Time[i+1], entryPrice);
         ObjectSetInteger(0, 'TrendLine', OBJPROP_COLOR, clrGreen);
      }
      else if (indicatorBuffer[i] < 0 && indicatorBuffer[i-1] > 0)
      {
         // Bearish trend identified
         double entryPrice = Bid - StopLoss * Point;
         double stopLossPrice = Bid + StopLoss * Point;
         double takeProfitPrice = Bid - TakeProfit * Point;
         
         Print('Bearish trend identified. Placing SELLSTOP pending order.');
         Print('Entry Price: ', entryPrice);
         Print('Stop Loss: ', stopLossPrice);
         Print('Take Profit: ', takeProfitPrice);
         
         ObjectCreate(0, 'TrendLine', OBJ_TREND, 0, Time[i], entryPrice, Time[i+1], entryPrice);
         ObjectSetInteger(0, 'TrendLine', OBJPROP_COLOR, clrRed);
      }
   }

   return rates_total;
}

//+------------------------------------------------------------------+
//| Check if all required indicators are available                   |
//+------------------------------------------------------------------+
bool IndicatorsExist()
{
   if (iCustom(NULL, 0, 'Indicator1') == -1 ||
       iCustom(NULL, 0, 'Indicator2') == -1 ||
       iCustom(NULL, 0, 'Indicator3') == -1)
   {
      return false;
   }

   return true;
}

//+------------------------------------------------------------------+
//| Calculate indicator value                                         |
//+------------------------------------------------------------------+
double CalculateIndicatorValue(const int index,
                               const double &open[],
                               const double &high[],
                               const double &low[],
                               const double &close[])
{
   double indicatorValue = iCustom(NULL, 0, 'Indicator1', index) +
                           iCustom(NULL, 0, 'Indicator2', index) +
                           iCustom(NULL, 0, 'Indicator3', index);

   return indicatorValue;
}
